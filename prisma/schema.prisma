generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String    @id @default(cuid())
  name     String?   @unique
  email    String?   @unique
  image    String?
  password String?
  role     UserRole  @default(USER)
  accounts Account[]

  expenses    Expense[]
  transaction Transaction[]

  fonteDeRenda     FonteDeRenda[]
  categoria        Categoria[]
  FormaDePagamento FormaDePagamento[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Transaction {
  id         String       @id @default(cuid())
  amount     String
  accountId  String       
  createdAt  String
  categoryId String       
  category   FonteDeRenda @relation(fields: [categoryId], references: [id])
  user       User         @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Expense {
  id                 String            @id @default(cuid())
  amount             String
  accountId          String            
  createdAt          String
  categoriaId        String           
  subcategoriaId     String           
  user               User              @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Categoria          Categoria?        @relation(fields: [categoriaId], references: [id])
  Subcategoria       Subcategoria?     @relation(fields: [subcategoriaId], references: [id])
  FormaDePagamento   FormaDePagamento? @relation(fields: [formaDePagamentoId], references: [id])
  formaDePagamentoId String          
}

model Categoria {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime

  Expense       Expense[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subcategorias Subcategoria[]

  @@unique([name, userId])
}

model Subcategoria {
  id          String @id @default(cuid())
  name        String
  categoriaId String

  categoria Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  Expense   Expense[]

  @@unique([name, categoriaId])
}

model FormaDePagamento {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Expense Expense[]

  @@unique([name, userId])
}

model FonteDeRenda {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@unique([name, userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
